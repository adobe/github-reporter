/*
 * Licensed to the Apache Software Foundation (ASF) under one or more
 * contributor license agreements.  See the NOTICE file distributed with
 * this work for additional information regarding copyright ownership.
 * The ASF licenses this file to You under the Apache License, Version 2.0
 * (the "License"); you may not use this file except in compliance with
 * the License.  You may obtain a copy of the License at
 *
 *     http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 */

plugins {
    id 'scala'
    id 'application'
    id "org.scoverage" version "3.1.5"
    id "com.gradle.build-scan" version "2.3"
    id "cz.alenkacz.gradle.scalafmt" version "1.5.1"
    id 'org.springframework.boot' version '2.1.7.RELEASE'
}


group 'com.github.chetanmeh.tools.git'
version '1.0-SNAPSHOT'
scalafmt.configFilePath = gradle.scalafmt.config
project.archivesBaseName = "github-reporter"

sourceCompatibility = 1.8

repositories {
    mavenCentral()
}

buildScan {
    termsOfServiceUrl = 'https://gradle.com/terms-of-service'
    termsOfServiceAgree = 'yes'
    publishAlwaysIf(System.getenv('CI') != null)
}

dependencies {
    compile "org.scala-lang:scala-library:${gradle.scala.version}"
    compile ('com.github.pureconfig:pureconfig_2.12:0.11.1')
    compile 'io.spray:spray-json_2.12:1.3.4'
    compile 'com.jcabi:jcabi-github:0.41'

    compile "com.typesafe.akka:akka-actor_2.12:${gradle.akka.version}"
    compile "com.typesafe.akka:akka-stream_2.12:${gradle.akka.version}"
    compile "com.typesafe.akka:akka-slf4j_2.12:${gradle.akka.version}"

    compile "com.typesafe.akka:akka-http-core_2.12:${gradle.akka_http.version}"
    compile "com.typesafe.akka:akka-http-spray-json_2.12:${gradle.akka_http.version}"

    compile 'ch.qos.logback:logback-classic:1.2.3'
    compile 'org.slf4j:jcl-over-slf4j:1.7.25'
    compile 'org.slf4j:log4j-over-slf4j:1.7.25'

    compile 'org.rogach:scallop_2.12:3.3.1'

    testCompile 'junit:junit:4.11'
    testCompile 'org.scalatest:scalatest_2.12:3.0.3'
    testCompile "com.typesafe.akka:akka-testkit_2.12:${gradle.akka.version}"
    testCompile "com.typesafe.akka:akka-stream-testkit_2.12:${gradle.akka.version}"
    testCompile "com.typesafe.akka:akka-http-testkit_2.12:${gradle.akka_http.version}"

}

tasks.withType(ScalaCompile) {
    scalaCompileOptions.additionalParameters = gradle.scala.compileFlags
}

bootJar {
    mainClassName = 'com.github.chetanmeh.tools.git.Main'
}

tasks.withType(Test) {
    testLogging {
        events "passed", "skipped", "failed"
        showStandardStreams = true
        exceptionFormat = 'full'
    }
}